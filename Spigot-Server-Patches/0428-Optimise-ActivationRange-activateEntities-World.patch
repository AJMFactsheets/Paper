From 7666f189e29c31a858014a669ce6afa66bae74da Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Fri, 27 Dec 2019 19:15:23 -0800
Subject: [PATCH] Optimise ActivationRange#activateEntities(World)

By using our Chunk#forEachEntity method, the time trimmed was
approximately 2-5x in my testing.

diff --git a/src/main/java/net/minecraft/server/AxisAlignedBB.java b/src/main/java/net/minecraft/server/AxisAlignedBB.java
index c950139c0..c94184899 100644
--- a/src/main/java/net/minecraft/server/AxisAlignedBB.java
+++ b/src/main/java/net/minecraft/server/AxisAlignedBB.java
@@ -193,6 +193,7 @@ public class AxisAlignedBB {
         return this.d(vec3d.x, vec3d.y, vec3d.z);
     }
 
+    public final boolean intersects(AxisAlignedBB aabb) { return this.c(aabb); } // Paper - OBFHELPER
     public boolean c(AxisAlignedBB axisalignedbb) {
         return this.a(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.minZ, axisalignedbb.maxX, axisalignedbb.maxY, axisalignedbb.maxZ);
     }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 0df0c73f7..f274255b2 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -4,6 +4,7 @@ import java.util.Collection;
 import java.util.List;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.Chunk;
+import net.minecraft.server.ChunkProviderServer; // Paper
 import net.minecraft.server.Entity;
 import net.minecraft.server.EntityAmbient;
 import net.minecraft.server.EntityAnimal;
@@ -125,6 +126,8 @@ public class ActivationRange
         maxRangeTemp = Math.max( maxRangeTemp, miscActivationRange );
         // Paper end
 
+        ChunkProviderServer chunkProviderServer = (ChunkProviderServer)world.getChunkProvider(); // Paper - optimise activateEntities
+
         for ( EntityHuman player : world.getPlayers() )
         {
 
@@ -145,7 +148,7 @@ public class ActivationRange
             {
                 for ( int j1 = k; j1 <= l; ++j1 )
                 {
-                    Chunk chunk = (Chunk) world.getChunkIfLoadedImmediately( i1, j1 );
+                    Chunk chunk = chunkProviderServer.getChunkAtIfLoadedMainThreadNoCache( i1, j1 ); // Paper - optimise activateEntities
                     if ( chunk != null )
                     {
                         activateChunkEntities( chunk );
@@ -163,24 +166,20 @@ public class ActivationRange
      */
     private static void activateChunkEntities(Chunk chunk)
     {
-        for ( List<Entity> slice : chunk.entitySlices )
-        {
-            for ( Entity entity : (Collection<Entity>) slice )
+        // Paper start - optimise this call
+        com.destroystokyo.paper.util.maplist.EntityList entityList = chunk.entities;
+        Entity[] rawData = entityList.getRawData();
+        for (int i = 0, len = entityList.size(); i < len; ++i) {
+            Entity entity = rawData[i];
+            if ( MinecraftServer.currentTick > entity.activatedTick )
             {
-                if ( MinecraftServer.currentTick > entity.activatedTick )
+                if ( entity.defaultActivationState || entity.activationType.boundingBox.intersects(entity.getBoundingBox())) /* Concrete - optimise this call */
                 {
-                    if ( entity.defaultActivationState )
-                    {
-                        entity.activatedTick = MinecraftServer.currentTick;
-                        continue;
-                    }
-                    if ( entity.activationType.boundingBox.c( entity.getBoundingBox() ) )
-                    {
-                        entity.activatedTick = MinecraftServer.currentTick;
-                    }
+                    entity.activatedTick = MinecraftServer.currentTick;
                 }
             }
         }
+        // Paper end
     }
 
     /**
-- 
2.24.0.windows.2

